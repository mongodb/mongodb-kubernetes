#!/usr/bin/env bash

set -Eeou pipefail

script_name=$(readlink -f "${BASH_SOURCE[0]}")
script_dir=$(dirname "${script_name}")
source "${script_dir}/private-context"

PROJECT_DIR="$(realpath "${script_dir}/../../..")"
export PROJECT_DIR
export IMAGE_TYPE=ubi
export UBI_IMAGE_WITHOUT_SUFFIX=true
export WATCH_NAMESPACE=${WATCH_NAMESPACE:-${NAMESPACE}}
export OPERATOR_NAME="mongodb-kubernetes-operator"

#
# changing variables below should not be necessary
#

# these are fixed when using scripts/dev/recreate_kind_clusters.sh
export TEST_POD_CLUSTER="${CLUSTER_NAME}"

export CENTRAL_CLUSTER="${CLUSTER_NAME}"
export MULTI_CLUSTER_CREATE_SERVICE_ACCOUNT_TOKEN_SECRETS=true
export MULTI_CLUSTER_CONFIG_DIR=${PROJECT_DIR}/.multi_cluster_local_test_files
export MULTI_CLUSTER_KUBE_CONFIG_CREATOR_PATH=${PROJECT_DIR}/docker/mongodb-kubernetes-tests/multi-cluster-kube-config-creator

# override for /etc/config/kubeconfig file mounted in operator's pod
if [[ "${LOCAL_OPERATOR}" == "true" ]]; then
  # This env var is used by the local operator to load multi-cluster kubeconfig.
  # Normally, the pod is loading it from a path that is mounted from the mongodb-enterprise-operator-multi-cluster-kubeconfig secret.
  # When running locally, we use cli tool to generate that kubeconfig secret and write it to this file.
  # This way, the local operator is using kubeconfig create by cli tool the same way as it's used when running in a pod.
  export KUBE_CONFIG_PATH=~/.operator-dev/multicluster_kubeconfig
  export PERFORM_FAILOVER=false
fi

export OPERATOR_ENV=${OPERATOR_ENV:-"dev"}

AGENT_VERSION="$(jq -r '.agentVersion' "${PROJECT_DIR}/release.json")"
export AGENT_VERSION

# Ops Manager
export OPS_MANAGER_NAMESPACE="operator-testing-50-current"

# Moved from the old set_env_context.sh
export LOCAL_RUN=true

if [[ "${OVERRIDE_VERSION_ID:-}" != "" ]]; then
  OPERATOR_VERSION="${OVERRIDE_VERSION_ID}"
  READINESS_PROBE_VERSION="${OVERRIDE_VERSION_ID}"
  VERSION_UPGRADE_HOOK_VERSION="${OVERRIDE_VERSION_ID}"
fi

export OPERATOR_VERSION="${OPERATOR_VERSION:-"latest"}"
export INIT_APPDB_VERSION="${INIT_APPDB_VERSION:-${OPERATOR_VERSION}}"
export INIT_DATABASE_VERSION="${INIT_DATABASE_VERSION:-${OPERATOR_VERSION}}"
export INIT_OPS_MANAGER_VERSION="${INIT_OPS_MANAGER_VERSION:-${OPERATOR_VERSION}}"
export DATABASE_VERSION="${DATABASE_VERSION:-${OPERATOR_VERSION}}"
export READINESS_PROBE_VERSION="${READINESS_PROBE_VERSION:-"latest"}"
export VERSION_UPGRADE_HOOK_VERSION="${VERSION_UPGRADE_HOOK_VERSION:-"latest"}"

### Registries and images
export QUAY_REGISTRY="quay.io/mongodb"
export REGISTRY=${REGISTRY}
export OPERATOR_REGISTRY=${OPERATOR_REGISTRY:-${REGISTRY}}
export INIT_IMAGES_REGISTRY=${INIT_IMAGES_REGISTRY:-${REGISTRY}}

# Specific registries for different images, can be overridden if needed
export INIT_APPDB_REGISTRY=${INIT_APPDB_REGISTRY:-${INIT_IMAGES_REGISTRY}}
export INIT_APPDB_IMAGE_REPOSITORY="${INIT_APPDB_REGISTRY}/mongodb-kubernetes-init-appdb"
export INIT_OPS_MANAGER_REGISTRY=${INIT_OPS_MANAGER_REGISTRY:-${INIT_IMAGES_REGISTRY}}
export INIT_OPS_MANAGER_IMAGE_REPOSITORY="${INIT_OPS_MANAGER_REGISTRY}/mongodb-kubernetes-init-ops-manager"
export INIT_DATABASE_REGISTRY=${INIT_DATABASE_REGISTRY:-${INIT_IMAGES_REGISTRY}}
export INIT_DATABASE_IMAGE_REPOSITORY="${INIT_DATABASE_REGISTRY}/mongodb-kubernetes-init-database"
export DATABASE_REGISTRY=${DATABASE_REGISTRY:-${INIT_IMAGES_REGISTRY}}
export MONGODB_ENTERPRISE_DATABASE_IMAGE="${DATABASE_REGISTRY}/mongodb-kubernetes-database"
export OPS_MANAGER_REGISTRY=${OPS_MANAGER_REGISTRY:-${REGISTRY}}
export OPS_MANAGER_IMAGE_REPOSITORY="${OPS_MANAGER_REGISTRY}/mongodb-enterprise-ops-manager-ubi"
export MDB_AGENT_REGISTRY=${MDB_AGENT_REGISTRY:-${REGISTRY}}
export MDB_AGENT_IMAGE_REPOSITORY="${MDB_AGENT_REGISTRY}/mongodb-agent"
export MONGODB_REPO_URL="${MONGODB_REPO_URL:-${QUAY_REGISTRY}}"
export MEKO_TESTS_REGISTRY=${MEKO_TESTS_REGISTRY:-${REGISTRY}}
export MEKO_TESTS_IMAGE_REPOSITORY="${MEKO_TESTS_REGISTRY}/mongodb-kubernetes-tests"
export READINESS_PROBE_REGISTRY=${READINESS_PROBE_REGISTRY:-${REGISTRY}}
export VERSION_UPGRADE_HOOK_REGISTRY=${VERSION_UPGRADE_HOOK_REGISTRY:-${REGISTRY}}

export AGENT_IMAGE="${MDB_AGENT_IMAGE_REPOSITORY}:${AGENT_VERSION}"
export READINESS_PROBE_IMAGE="${READINESS_PROBE_REGISTRY}/mongodb-kubernetes-readinessprobe:${READINESS_PROBE_VERSION}"
export VERSION_UPGRADE_HOOK_IMAGE="${VERSION_UPGRADE_HOOK_REGISTRY}/mongodb-kubernetes-operator-version-upgrade-post-start-hook:${VERSION_UPGRADE_HOOK_VERSION}"

export KUBE_ENVIRONMENT_NAME=kind

# when using EVG ec2 instance, we copy kubeconfig locally and use it
if [[ "${EVG_HOST_NAME:-}" != "" ]]; then
  KUBECONFIG=~/.operator-dev/evg-host.kubeconfig
else
  KUBECONFIG=~/.kube/config
fi
export KUBECONFIG

if [[ "$(uname)" == "Linux" ]]; then
  export GOROOT=/opt/golang/go1.24
fi

export SIGNING_PUBLIC_KEY_URL="https://cosign.mongodb.com/mongodb-enterprise-kubernetes-operator.pem"

export CLUSTER_DOMAIN="cluster.local"

export MDB_MAX_CONCURRENT_RECONCILES=10
export MDB_IMAGE_TYPE="ubi9"

# leaving them empty for now
export OM_HOST=https://cloud-qa.mongodb.com
export OM_BASE_URL=https://cloud-qa.mongodb.com

export e2e_cloud_qa_baseurl="${OM_HOST}"
export e2e_cloud_qa_baseurl_static_2="${OM_HOST}"

export OLM_VERSION=v0.31.0

# Python version we use locally and in CI
export PYTHON_VERSION=3.13.7

## MCO
export MDB_COMMUNITY_IMAGE=mongodb-community-server
export MDB_COMMUNITY_REPO_URL=quay.io/mongodb
export MDB_COMMUNITY_AGENT_IMAGE=${AGENT_IMAGE}
export MDB_COMMUNITY_IMAGE_TYPE=ubi8

# Community Search
MDB_SEARCH_VERSION="$(jq -r '.search.version' "${PROJECT_DIR}/release.json")"
export MDB_SEARCH_VERSION

export MDB_SEARCH_NAME="mongodb-search"
export MDB_SEARCH_REPO_URL="quay.io/mongodb"


if [[ ${MDB_BASH_DEBUG:-0} == 1 ]]; then
  export PS4='+(${BASH_SOURCE}:${LINENO})[^$?]: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
fi

# MCK is capable of deploying a webhook (optional).
# To do so it needs know which pods to select for routing traffic
# in the Service and operator name currently serves as a selector.
# This value must be different for multi cluster setup,
# but we can unify once we are done with unified operator
# installation for both multicluster and single cluster setups.
export OPERATOR_NAME="mongodb-kubernetes-operator"

# Variables used for release process
export RELEASE_INITIAL_COMMIT_SHA="9ed5f98fc70c5b3442f633d2393265fb8a2aba0c"
export RELEASE_INITIAL_VERSION="1.3.0"
