#!/usr/bin/env bash

set -Eeou pipefail

get_operator_helm_values() {
  # shellcheck disable=SC2153
  local database_registry=${DATABASE_REGISTRY}
  local database_name=${DATABASE_NAME:=mongodb-kubernetes-database}

  declare -a config=(
    "managedSecurityContext=${MANAGED_SECURITY_CONTEXT:-false}"
    "registry.operator=${OPERATOR_REGISTRY}"
    "registry.imagePullSecrets=image-registries-secret"
    "registry.initOpsManager=${INIT_OPS_MANAGER_REGISTRY}"
    "registry.initAppDb=${INIT_APPDB_REGISTRY}"
    "registry.initDatabase=${INIT_DATABASE_REGISTRY}"
    "registry.agent=${MDB_AGENT_REGISTRY}"
    "registry.opsManager=${OPS_MANAGER_REGISTRY}"
    "registry.database=${database_registry}"
    "opsManager.name=${OPS_MANAGER_NAME:=mongodb-enterprise-ops-manager-ubi}"
    "database.name=${database_name:=mongodb-kubernetes-database}"
    "operator.version=${OPERATOR_VERSION}"
    "initOpsManager.version=${INIT_OPS_MANAGER_VERSION}"
    "initAppDb.version=${INIT_APPDB_VERSION}"
    "initDatabase.version=${INIT_DATABASE_VERSION}"
    "database.version=${DATABASE_VERSION}"
    "agent.version=${AGENT_VERSION}"
    "mongodb.name=mongodb-enterprise-server"
    "mongodb.imageType=${MDB_IMAGE_TYPE:-ubi8}"
    "operator.mdbDefaultArchitecture=${MDB_DEFAULT_ARCHITECTURE:-non-static}"
    "operator.enablePVCResize=${MDB_ENABLE_PVC_RESIZE:-true}"
    # only send the telemetry to the backend on a specific variant, thus default to false
    "operator.telemetry.send.enabled=${MDB_OPERATOR_TELEMETRY_SEND_ENABLED:-false}"
    # lets collect and save in the configmap as frequently as we can
    "operator.telemetry.collection.frequency=${MDB_OPERATOR_TELEMETRY_COLLECTION_FREQUENCY:-1m}"
    "search.repo=${MDB_SEARCH_REPO_URL}"
    "search.name=${MDB_SEARCH_NAME}"
    "search.version=${MDB_SEARCH_VERSION}"
    "community.registry.agent=${MDB_AGENT_REGISTRY}"
  )

  if [[ "${MDB_OPERATOR_TELEMETRY_INSTALL_CLUSTER_ROLE_INSTALLATION:-}" != "" ]]; then
    config+=("operator.telemetry.installClusterRole=${MDB_OPERATOR_TELEMETRY_INSTALL_CLUSTER_ROLE_INSTALLATION}")
  fi

  # Add OpenTelemetry values if any of the environment variables are set
  if [[ -n "${otel_trace_id:-}" || -n "${otel_parent_id:-}" || -n "${otel_collector_endpoint:-}" ]]; then
    config+=("operator.opentelemetry.tracing.enabled=true")

    if [[ -n "${otel_trace_id:-}" ]]; then
      config+=("operator.opentelemetry.tracing.traceID=${otel_trace_id}")
    fi

    if [[ -n "${otel_parent_id:-}" ]]; then
      config+=("operator.opentelemetry.tracing.parentID=${otel_parent_id}")
    fi

    if [[ -n "${otel_collector_endpoint:-}" ]]; then
      config+=("operator.opentelemetry.tracing.collectorEndpoint=${otel_collector_endpoint}")
    fi
  fi

  if [[ "${MDB_OPERATOR_TELEMETRY_ENABLED:-true}" == "false" ]]; then
    config+=("operator.telemetry.enabled=false")
    config+=("operator.telemetry.collection.clusters.enabled=false")
    config+=("operator.telemetry.collection.deployments.enabled=false")
    config+=("operator.telemetry.collection.operators.enabled=false")
  fi

  # shellcheck disable=SC2154
  if [[ "${KUBE_ENVIRONMENT_NAME-}" = "multi" ]]; then
    if [[ -n "${MEMBER_CLUSTERS:-}" ]]; then
      comma_separated_list="$(echo "${MEMBER_CLUSTERS}" | tr ' ' ',')"
      # shellcheck disable=SC2154
      config+=("multiCluster.clusters={${comma_separated_list}}")
    fi
    config+=("operator.createOperatorServiceAccount=false")
  fi

  if [[ "${BUILD_WITH_RACE_DETECTION:-}" == "true" ]]; then
    config+=("operator.build=-race")
  fi

  if [[ "${MDB_MAX_CONCURRENT_RECONCILES:-}" != "" ]]; then
    config+=("operator.maxConcurrentReconciles=${MDB_MAX_CONCURRENT_RECONCILES}")
  fi

  # change this locally or as changed in variant e2e_operator_race_ubi_with_telemetry which also sends telemetry
  if [[ "${MDB_OPERATOR_TELEMETRY_SEND_BASEURL:-}" != "" ]]; then
    config+=("operator.telemetry.send.baseUrl=${MDB_OPERATOR_TELEMETRY_SEND_BASEURL}")
  fi

  if [[ "${MDB_HELM_OPERATOR_WEBHOOK_INSTALL_CLUSTER_ROLE:-}" != "" ]]; then
    config+=("operator.webhook.installClusterRole=${MDB_HELM_OPERATOR_WEBHOOK_INSTALL_CLUSTER_ROLE}")
  fi

  echo "${config[@]}"
}

prepare_operator_config_map() {
  local context=${1}
  kubectl --context "${context}" delete configmap operator-installation-config --ignore-not-found
  title "Preparing the ConfigMap with Operator installation configuration"

  read -ra helm_values < <(get_operator_helm_values)
  declare -a config_map_values=()
  for param in "${helm_values[@]}"; do
    config_map_values+=("--from-literal" "${param}")
  done
  # shellcheck disable=SC2086,SC2048
  kubectl --context "${context}" create configmap operator-installation-config -n "${NAMESPACE}" ${config_map_values[*]} || true
}
