# MongoDB Search with External MongoDB (No TLS) - Quick Start

This guide shows how to deploy MongoDB Search in Kubernetes and connect it to an existing external MongoDB replica set without TLS. The mongot component runs in the cluster, while the MongoDB replica set exists externally.

## Prerequisites

Before you begin, ensure you have the following tools and configurations in place:

- **Kubernetes cluster**: A running Kubernetes cluster (e.g., Minikube, Kind, GKE, EKS, AKS) with kubeconfig available locally.
- **kubectl**: The Kubernetes command-line tool, configured to communicate with your cluster.
- **Helm**: The package manager for Kubernetes, used here to install the MongoDB Kubernetes Operator.
- **Bash 5.1+**: All shell commands in this guide are intended to be run in Bash. Scripts in this guide are automatically tested on Linux with Bash 5.1.
- **External MongoDB**: An existing MongoDB Community replica set (version 8.0.10 or higher) that will serve as the data source for search.

## Setup Steps

The following steps guide you through deploying MongoDB Search to connect to your external MongoDB. Each step provides a shell script.
**It is important to first source the `env_variables.sh` script provided and customize its values for your environment.**
The subsequent script snippets rely on the environment variables defined in `env_variables.sh`. You should copy and paste each script into your Bash terminal.

### 1. Configure Environment Variables

First, you need to set up your environment. The `env_variables.sh` script, shown below, contains variables for the subsequent steps. You should create this file locally or use the linked one.

Download or copy the content of `env_variables.sh`:
[env_variables.sh](env_variables.sh)
```shell copy
{% include "env_variables.sh" %}
```
This will load the variables into your current shell session, making them available for the commands in the following steps.

### 2. Add MongoDB Helm Repository

First, add the MongoDB Helm repository. This repository contains the Helm chart required to install the MongoDB Kubernetes Operator. The operator automates the deployment and management of MongoDB Search instances on Kubernetes.

[code_snippets/090_helm_add_mogodb_repo.sh](code_snippets/090_helm_add_mogodb_repo.sh)
```shell copy
{% include "code_snippets/090_helm_add_mogodb_repo.sh" %}
```

### 3. Install MongoDB Kubernetes Operator

Next, install the MongoDB Kubernetes Operator from the Helm repository you just added. The Operator will watch for MongoDBSearch custom resources and manage the lifecycle of your MongoDB Search deployments.

[code_snippets/0100_install_operator.sh](code_snippets/0100_install_operator.sh)
```shell copy
{% include "code_snippets/0100_install_operator.sh" %}
```
This command installs the operator in the `mongodb` namespace (creating it if it doesn't exist).

## Deploying MongoDB Search

With the prerequisites and initial setup complete, you can now deploy MongoDB Search to connect to your external MongoDB.

### 4. Create Search User Secrets

MongoDB Search requires authentication credentials to connect to your external MongoDB. This step creates a Kubernetes secret that stores the password for the search synchronization user that must exist in your external MongoDB.

[code_snippets/04_0305_create_search_user_secrets.sh](code_snippets/04_0305_create_search_user_secrets.sh)
```shell copy
{% include "code_snippets/04_0305_create_search_user_secrets.sh" %}
```
Ensure this secret is created in the same namespace where you plan to deploy MongoDB Search.

### 5. Create External MongoDB Keyfile Secret

Your external MongoDB replica set uses a keyfile for internal authentication between replica set members. MongoDB Search needs access to this same keyfile to authenticate with your external MongoDB. This step creates a Kubernetes secret containing the keyfile content from your external MongoDB.

**Important**: You must obtain the keyfile content from your external MongoDB replica set. This is typically a base64-encoded string or the raw keyfile content used by your MongoDB instances.

[code_snippets/04_0318_create_external_keyfile_secret.sh](code_snippets/04_0318_create_external_keyfile_secret.sh)
```shell copy
{% include "code_snippets/04_0318_create_external_keyfile_secret.sh" %}
```

**Note**: Make sure to set the `MDB_EXTERNAL_KEYFILE_CONTENT` environment variable to the exact keyfile content used by your external MongoDB replica set.

### 6. Create MongoDB Search Resource

Deploy a `MongoDBSearch` resource named `mdbs` that connects to your external MongoDB replica set. The Search resource lists the external replica set members under `spec.source.external.hostAndPorts` and uses the search synchronization user credentials. TLS is disabled in this example.

Note: Public Preview of MongoDB Community Search comes with some limitations, and it is not suitable for production use:
* Only one instance of the search node is supported (load balancing is not supported)

[code_snippets/0320_create_mongodb_search_resource.sh](code_snippets/0320_create_mongodb_search_resource.sh)
```shell copy
{% include "code_snippets/0320_create_mongodb_search_resource.sh" %}
```

The `MongoDBSearch.spec` fields in this example are:
* `spec.source.external.hostAndPorts` - list of external MongoDB replica set members.
* `spec.source.external.keyFileSecretRef` - reference to the keyfile secret used by the external replica set.
* `spec.source.external.tls.enabled` - set to `false` to disable TLS between mongot and mongod.
* `spec.username` and `spec.passwordSecretRef` - credentials for the search synchronization user in the external MongoDB.
* `spec.resourceRequirements` - resource requests and limits for the search container.

### 7. Create LoadBalancer Service for External Search Access

To enable your external MongoDB instances to connect to the search service, create a LoadBalancer service that exposes the search pods outside the Kubernetes cluster. This step creates a LoadBalancer service and waits for it to receive an external IP address or hostname.

[code_snippets/04_0322_create_search_loadbalancer_service.sh](code_snippets/04_0322_create_search_loadbalancer_service.sh)
```shell copy
{% include "code_snippets/04_0322_create_search_loadbalancer_service.sh" %}
```

This service exposes the MongoDB Search service on port 27027 with an external IP address or hostname that can be accessed from outside the Kubernetes cluster.

#### Alternative Service Exposure Methods

While this guide uses a LoadBalancer service, there are other ways to expose search pods outside the cluster:

**NodePort Service**
```yaml
apiVersion: v1
kind: Service
metadata:
  name: ${MDB_SEARCH_HOSTNAME}
spec:
  type: NodePort
  selector:
    app: mdbs-search-svc
  ports:
    - name: mongot
      port: 27027
      targetPort: 27027
      nodePort: 30027  # Optional: specify port 30000-32767
```
Access via `<NodeIP>:<NodePort>` from any cluster node.

**Ingress with TCP Support**
```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: search-ingress
  annotations:
    nginx.ingress.kubernetes.io/tcp-services-configmap: ${MDB_NS}/tcp-services
spec:
  # Configure TCP passthrough for port 27027
```
Requires an ingress controller that supports TCP services (like NGINX).

**ClusterIP with Port Forwarding** (Development only)
```bash
kubectl port-forward -n ${MDB_NS} svc/${MDB_SEARCH_HOSTNAME} 27027:27027
```
Suitable for local development and testing only.

### 8. Update CoreDNS Configuration for External Access

When using external MongoDB instances, you need to configure DNS resolution so that the external MongoDB can resolve the search service hostname. This step updates the CoreDNS configuration to map the search hostname to the LoadBalancer's external IP address.

[code_snippets/04_0323_update_coredns_configmap.sh](code_snippets/04_0323_update_coredns_configmap.sh)
```shell copy
{% include "code_snippets/04_0323_update_coredns_configmap.sh" %}
```

This configuration allows external MongoDB instances to resolve the search service hostname to the LoadBalancer's external IP address.

### 9. Wait for Search Resource to be Ready

The Search deployment needs time to initialize. This step uses `kubectl wait` to pause until the `MongoDBSearch` resource `mdbs` reports a `Running` status in its `.status.phase` field, indicating that the search nodes are operational and ready to serve search requests.

[code_snippets/0325_wait_for_search_resource.sh](code_snippets/0325_wait_for_search_resource.sh)
```shell copy
{% include "code_snippets/0325_wait_for_search_resource.sh" %}
```
This command polls the status of the `MongoDBSearch` resource `mdbs`.

### 10. List Running Search Pods

View the running search pods in your namespace. You should see pods for the MongoDB Kubernetes Operator and the MongoDB Search nodes.

[code_snippets/0335_show_running_pods.sh](code_snippets/0335_show_running_pods.sh)
```shell copy
{% include "code_snippets/0335_show_running_pods.sh" %}
```

## Using MongoDB Search

Now that your MongoDB Search is deployed and connected to your external MongoDB, you can start using its search capabilities.

### 11. Create MongoDB User Secrets for Testing

To test the search functionality, you'll need credentials to connect to your external MongoDB. This step creates Kubernetes secrets for the MongoDB admin and regular user passwords that must exist in your external MongoDB.

[code_snippets/04_0410_create_mongodb_user_secrets.sh](code_snippets/04_0410_create_mongodb_user_secrets.sh)
```shell copy
{% include "code_snippets/04_0410_create_mongodb_user_secrets.sh" %}
```

### 12. Deploy MongoDB Tools Pod

To interact with your external MongoDB deployment for testing, this step deploys a utility pod named `mongodb-tools-pod`. This pod runs a MongoDB Community Server image and is kept running with a `sleep infinity` command, allowing you to use `kubectl exec` to run MongoDB client tools like `mongosh` and `mongorestore`.

[code_snippets/0410_run_mongodb_tools_pod.sh](code_snippets/0410_run_mongodb_tools_pod.sh)
```shell copy
{% include "code_snippets/0410_run_mongodb_tools_pod.sh" %}
```

### 13. Import Sample Data

To test the search functionality, this step imports the `sample_mflix.movies` collection into your external MongoDB. It downloads the sample dataset and uses `mongorestore` to load the data into the `sample_mflix` database.

[code_snippets/0420_import_movies_mflix_database.sh](code_snippets/0420_import_movies_mflix_database.sh)
```shell copy
{% include "code_snippets/0420_import_movies_mflix_database.sh" %}
```
This command uses `mongorestore` from the `mongodb-tools-pod` to load data from the downloaded `sample_mflix.archive` file.

### 14. Create Search Index

Before performing search queries, create a search index. This step uses `kubectl exec` to run `mongosh` in the `mongodb-tools-pod`. It connects to the external MongoDB and calls `db.movies.createSearchIndex()` to create a search index named "default" with dynamic mappings on the `movies` collection. Dynamic mapping automatically indexes all fields with supported types.

[code_snippets/0430_create_search_index.sh](code_snippets/0430_create_search_index.sh)
```shell copy
{% include "code_snippets/0430_create_search_index.sh" %}
```

### 15. Wait for Search Index to be Ready

Creating a search index is an asynchronous operation. This script waits for the search index to be created and ready for use.

[code_snippets/0440_wait_for_search_index_ready.sh](code_snippets/0440_wait_for_search_index_ready.sh)
```shell copy
{% include "code_snippets/0440_wait_for_search_index_ready.sh" %}
```

### 16. Execute a Search Query

Once the search index is ready, execute search queries using the `$search` aggregation pipeline stage. MongoDB Search supports various types of queries such as text search, autocomplete, faceting, and more. You can combine `$search` with other aggregation stages to further refine and process your results.

[code_snippets/0450_execute_search_query.sh](code_snippets/0450_execute_search_query.sh)
```shell copy
{% include "code_snippets/0450_execute_search_query.sh" %}
```
